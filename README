WHAT IS PHPGasus
PHPGasus is another PHP Framework which aims to allow quick and smart web developements being the more easy to learn & use than possible. 
It's based on well known principles

PRINCIPLES
- REST 
- ROA
- Model Driven Development
- DRY
- KISS
- MVC
- Conventions over configuration
- less is more (“Perfection is achieved, not when there is nothing left to add, but when there is nothing left to remove.” (Antoine de Saint-Exupéry))
- the content is the interface

INSPIRATION
- RESTful web services: http://www.amazon.fr/Restful-Web-Services-Leonard-Richardson/dp/0596529260/ref=sr_1_1?ie=UTF8&qid=1311161813&sr=8-1
- Apple iOS
- John Maeda
- http://design.activeside.net/design-chaos-et-complexite


REQUIREMENTS
- PHP 5 (best 5.3, or recommanded >5.2.6)
- Apache 2 (with mod_rewrite)


TOP FEATURES
- EASY SETUP (just upload files and launch setup page)
- AUTOMATIC DATABASE SCHEMA retrieval
- ORM via admin interface (or by smart & simple php files for code purists)
- DBAL with support for mysql, postgresql, sqlite & mongoDB
- ADMIN generator (scaffholding)
- API generator (scaffholding)
- PERFs optimized (includes preconfigured vhost and/or .htaccess)
- EASY to learn (no 500 pages book or 200 pages website documentation)
- HTML5 based
- OS/DEVICE & Browser sniffing 
- CSS/JS minification
- TEMPLATES engines included (smarty 3, Twig & Haaga)
- ACL module included (users-groups-permissions)
- PRECONFIGURED ENVIRONMENTS (local,dev,preprod,prod)
- DEFAULT OUTPUT FORMATS included for all views/pages (html, xhtml, xml, json, jsonp, jsonreport, yaml, plist, csv, rss, atom, pdf)
- AUTO-UPDATES (to come)


WHY Use PHPGasus
- you love things like Ruby on Rails, Django, Python, jQuery,
- you can stand watching the code of Wordpress or Drupal for their uglyness
- you can stand watching the code of Symfony for it's verbosity
- you want to start coding immediately, code few, fast, clean & secure
- you love the tools that try to guess want you want and act consequently
- you love syntactic sugar
- you don't want to read a 500 pages book or ten 20 minutes videos to start doing great things
- you don't want to have to use a CLI (Command Line Interface) to create anything
- you love smart & ergonomic interfaces (with lots of magic applied)
- even if you are a code fanatic or interface hater, you can do it too (and their still some magic applied)
- you prefer doing $this->users->getOneBirthdateByEmail('foo@bar.com') than $this->db->query("SELECT birthdate FROM users AS u WHERE u.email = 'foo@bar.com' LIMIT 1")


Dispatcher
In PHPGasus, every URL (except for content in public folder) is redirected to the dispatcher : index.php at the root of your project.
This function tries to call the proper method of the proper controller with proper arguments.


/parent/child/grandchild => 
/Controller/{parent}/{child}/{grandchild}/C{Grandchild}.class.php::index() 
|| /Controller/{parent}/{child}/C{Grandchild}.class.php::index() 
|| /Controller/{parent}/{child}/C{Child}.class.php::grandchild() 
|| /Controller/{parent}/V{Child}.class.php::grandchild() 
|| /Controller/{parent}/V{Parent}.class.php::child(array({grandchild})) 
|| /Controller/C{Parent}.class.php::child(array({grandchild})) 
|| /Controller/{parent}/V{Parent}.class.php::index(array({child}, {grandchild})) 
|| /Controller/C{Parent}.class.php::index(array({child}, {grandchild}))
|| /Controller/C{Home}.class.php::parent(array({child}, {grandchild})) 
|| /Controller/V{Home}.class.php::index(array({parent}, {child}, {grandchild}))
<==== TODO: try to detech mispelling of existing resources and/or methods ==> then display "Did you mean" page with link to proper page

Samples:
condider the following arborescence for controllers folder: [TODO: replace this by an image of the arbo]
/Controllers/CHome.class.php (with index() and hello() methods)
/Controllers/products/CProducs.class.php (with index() and retrieve() methods)
/Controllers/users/CUsers.class.php (with index() and me() methods)

VERB PATH         						  CONTROLLER CALLED 										  MODEL CALLED
GET /                                       => /CHome->index() 										 => no model call
GET /notAMethod                             => /CHome->error404('notAMethod') 						  => no model call
GET /hello/world                        	=> /CHome->hello('world') 								  => no model call
GET /hello/world/1                          => /CHome->hello('world','1')                               => no model call
GET /hello/world/1/2                        => /CHome->hello('world','1','2')                           => no model call
GET /hello/world/1/2/and/goes/on            => /CHome->hello('world','1','2,'and','goes','on')          => no model call
GET /products/                              => /CProducts->index()                                      => Products->getAll()
GET /products/1                             => /CProducts->retrieve('1')                                => Products->getOneByNameField(array('foo','bar'))
GET /products/myKillerProduct               => /CProducts->retrieve('myKillerProduct')                  => Products->getOneByNameField('myKillerProduct')
GET /products/myKillerProduct/blue          => /CProducts->retrieve('myKillerProduct','blue')           => Products->getOneByNameField('myKillerProduct') [blue isn't an existing column in users -> not used]
GET /users/                                 => /CUsers->index()                                         => Users->getAll() [limited to X items by defaut]
GET /users/me                               => /CUsers->me()                                            => Users->getById($loggedUsedId)
GET /users/me/42                            => /CUsers->me('42')                                        => Users->getById($loggedUsedId) [42 isn't an existing column in users -> not used]
GET /users/gudoy                            => /CUsers->retrieve('gudoy')                               => Users->getAllByNameField('gudoy')
GET /users/gudoy/42                         => /CUsers->retrieve('gudoy','42')                          => Users->getAllByNameField('gudoy') [42 isn't an existing column in users -> not used]
GET /users/gudoy/birthyear/1983             => /CUsers->retrieve('gudoy','birthyear','1983')            => Users->getAllByNameFieldWhereBirthyearIs1983('gudoy')
GET /users/42,43,44/                        => /CUsers->index('42,43,44')                               => Users->getAllById(array(42,43,44))
GET /users/42,43,44/email                   => /CUsers->index('42,43,44','email')                       => Users->getAllEmailById(array(42,43,44))
GET /users/42,43,44/email,birthday          => /CUsers->index('42,43,44','email,birthday')              => Users->getAllEmailAndBirthdayById(array(42,43,44))
GET /users/42,43,foo/email,birthday         => /CUsers->index('42,43,foo','email,birthday')             => Users->findAllEmailAndBirthdayById(array(42,43,'foo'))

/products => /products/products::index() || /products::index() || /home::users() || /home::index(array(products))
/products/foo => /products/foo/foo::users/products::index() || /products::index() || /home::products() || Home::index(array(products))


CONTROLLERS
- classname = 'C' + ucfirst(controllername)
- have to extends built in Controller
- require an 'index' method


JAVASCIPTS // TODO: choose pattern
GET     /                       => homeIndex                => home.init() && homeIndex.init()
GET     /about/                 => aboutIndex               => about.init() && aboutIndex.init()
GET     /about/credits          => aboutCreditsIndex        => about.init() && credits.init() && aboutCreditsIndex.init()
GET     /admin/                 => adminIndex               => admin.init() && adminIndex.init()
GET     /admin/user/42          => adminUsersRetrieve       => admin.init() && users.init() && adminUsers.init() && adminUsersRetrieve.init()
POST    /admin/user/42          => adminUsersUpdate         => admin.init() && users.init() && adminUsers.init() && adminUsersCreate.init()
PUT     /admin/user/42          => adminUsersUpdate         => admin.init() && users.init() && adminUsers.init() && adminUsersUpdate.init()
DELETE  /admin/user/42          => adminUsersDelete         => admin.init() && users.init() && adminUsers.init() && adminUsersDelete.init()
or 
GET     /                       => homeIndex                => home.init() && home.index()
GET     /about/                 => aboutIndex               => about.init() && about.index()
GET     /about/credits          => aboutCreditsIndex        => about.init() && credits.init() && aboutCreditsIndex.init()
GET     /admin/                 => adminIndex               => admin.init() && admin.index()
GET     /admin/users/42         => adminUsersRetrieve       => admin.init() && admin.users.init() && admin.users.retrieve()
POST    /admin/users/42         => adminUsersUpdate         => admin.init() && admin.users.init() && admin.users.create()
PUT     /admin/users/42         => adminUsersUpdate         => admin.init() && admin.users.init() && admin.users.update()
DELETE  /admin/users/42         => adminUsersDelete         => admin.init() && admin.users.init() && admin.users.delete()
GET     /users/42/products/     => usersProductsRetrieve    => users.init() && products.init() && users.products.init()

// + specifics js: load files + $(document).ready()


CODING PRACTICES
#http://net.tutsplus.com/tutorials/php/30-php-best-practices-for-beginners/
- know types handling, transtyping/casting, comparisions
- WARNING with == and ==== comparisions
- preferer ternary operator for simple if/else testing ( condition ? "condition is true" : "condition is false" )
- avoid if/for/foreach/... nesting (more than 2 levels is BAD, more than 3 levels is REALLY BAD
- use dynamic arguments (using $args = func_get_args()) or a $params as last param of your functions


Magic request params
{anyURL}.html               <== display the html reprensatation of the page data [default]
{anyURL}.xhtml              <== display the html reprensatation of the page data
{anyURL}.qr                 <== display the qr code containing the url of the page data
{anyURL}.json               <== return the json representation of the page data
{anyURL}.jsontxt            <== return the json representation of the page data, served as plain text
{anyURL}.jsonreport         <== return the jsonreport (http://ajaxstack.com/jsonreport/) of the page data
{anyURL}.xml                <== return the xml representation of the page data
{anyURL}.plist              <== return the plist representation of the page data
{anyURL}.plistxml           <== return the plist representation of the page data, served as plain text
{anyURL}.yaml               <== return the yaml representation of the page data
?css=no                     <== disable css
?js=no                      <== disable css
?minify=all                 <== force minification of js & css (override conf directives)
?minify=css                 <== force minification of css
?minify=js                  <== force minification of css
?tplSelf=1                  <== only return main template content (not the layout) [by default for ajax requests]
?limit=100                  <== never return more than 100 items for a resource (unless you explicitely asked for more using 'limit' => -1 params in your code
?conditions={$conditions}   <== never return more than 100 items for a resource (unless you explicitely asked for more using 'limit' => -1 params in your code
?isIphone           		<== 
?emulated           		<== 
?isAndroid          		<== 


// TODO: description, default value(s), accepted/known/recognized values, samples
// TODO: where put tplSelf, redirect

REFERENCE
$this->
    debug
        * boolean   // enable debug (allow logging & debug toolbar in templates)
	_extendedDatamodel
		resources <=== &$this->resources
		groups
		filters
		columns 	<=== &$this->_dataModel
		searchable <=== list of searchable resources???
	_dataModel
            // mysql types:
            // 'serial', 'bit', 'tinyint', 'bool', 'smallint', 'mediumint', 'int', 'bigint', 'float', 'double', 'double precision', 'decimal', 
            // 'date', 'datetime', 'timestamp', 'time', 'year', 
            // 'char', 'varchar', 'binary', 'varbinary', 'tinyblob', 'tinytext', 'blob', 'text', 'mediumblob', 'mediumtext', 'longblob', 'longtext', 'enum', 'set'

    		'types' 	=> array(
				# Texts
				'string', 'varchar', 'email', 'password', 'url', 'tel', 'color', 'meta', 'ip',
				'slug', 'tag', 
				'text', 'html', 'code',
				
				# Numbers
				'int', 'integer', 'numeric',
				'tinyint', 'smallint', 'mediumint', 'bigint',
				'float', 'real', 'double',
				
				# Booleans
				'bool','boolean',
				
				# Dates & times
				'timestamp', 'datetime', 'date', 'time', 'year', 'month', 'week', 'day', 'hour', 'minutes', 'seconds', 
				
				# Relations
				'1-1', 'onetoone', 'one2one', '121', '1to1', '12one',
				'1-n', 'onetomany', 'one2many', '12n', '1ton', '1tomany', '12many',  
				'n-1', 'manytoone', 'many2one', 'n21', 'nto1', 'manyto1', 'many21',
				'n-n', 'manytomany', 'many2many', 'n2n', 'nton',
				
				# Misc
				'pk', 'id', 'serial',
				'enum', 'choice',
				'file', 'image', 'video', 'sound', 'file',
			),
			'realtypes' => array(
				# Texts
				// strings (length=255) 
					'string' 		=> 'string',
					'varchar' 		=> 'string',
					'slug' 			=> 'string', // + length = 64
					'tag' 			=> 'string', // alias of slug
					'email' 		=> 'string', // + validator pattern
					'password'		=> 'string', // + modifiers = sha1
					'url' 			=> 'string', // + FILTER_VALIDATE_URL?
					'tel' 			=> 'string', // + length = 20???, + pattern ? 
					'color'			=> 'string', // + length = 32, + validator pattern (#hex, rgb(), rgba(), hsl(), ... ?)
					'meta' 			=> 'string',
					'ip' 			=> 'string', // + length = 40 + FILTER_VALIDATE_IP, ? 

					
					// texts (length=null)				
					'html' 			=> 'text',
					'code' 			=> 'text',
					'text' 			=> 'text',

				# Numerics
					// ints
					'int' 			=> 'integer', // + min = -2147483648, + max = 2147483648
					'integer'		=> 'integer', // + min = -2147483648, + max = 2147483648
					'num'			=> 'integer', // + min = -2147483648, + max = 2147483648
					'number'		=> 'integer', // + min = -2147483648, + max = 2147483648
					
					'tinyint' 		=> 'tinyint', // + min = -128, + max = 128 
					'smallint' 		=> 'smallint', // + min = -32768, + max = 32768
					'mediumint' 	=> 'mediumint', // + min = -8388608, + max = 8388608
					'bigint' 		=> 'bigint', // + min = -9223372036854775808, + max = 9223372036854775808
					
					// floats
					'float' 		=> 'float',
					'real' 			=> 'float',
					'double'		=> 'float',		
					
				# Booleans
					'bool' 			=> 'boolean',
					'boolean' 		=> 'boolean',
					
				# Dates & times
					// timestamps
					'timestamp' 	=> 'timestamp',
					'date' 			=> 'date',
					'datetime' 		=> 'datetime',
					
				# Relations
					// One to one relations (& aliases)
					'1-1' 			=> 'onetone', 
					'onetoone' 		=> 'onetone', 
					'one2one' 		=> 'onetone', 
					'121' 			=> 'onetone', 
					'1to1' 			=> 'onetone', 
					'12one' 		=> 'onetone',

					// One to many relations (& aliases)
					'1-n' 			=> 'onetomany', 
					'onetomany' 	=> 'onetomany', 
					'one2many' 		=> 'onetomany', 
					'12n' 			=> 'onetomany', 
					'1ton' 			=> 'onetomany', 
					'1tomany' 		=> 'onetomany', 
					'12many' 		=> 'onetomany',  
					
					// Many to one relations (& aliases)
					'n-1' 			=> 'manytoone', 
					'manytoone' 	=> 'manytoone', 
					'many2one' 		=> 'manytoone', 
					'n21' 			=> 'manytoone', 
					'nto1' 			=> 'manytoone', 
					'manyto1' 		=> 'manytoone', 
					'many21' 		=> 'manytoone',
					
					// Many to many relations (& aliases)
					'n-n' 			=> 'manytomany', 
					'manytomany' 	=> 'manytomany', 
					'many2many' 	=> 'manytomany', 
					'n2n' 			=> 'manytomany', 
					'nton' 			=> 'manytomany',
				
				# Misc
					// Enum
					'enum' 			=> 'enum',
					'choice' 		=> 'enum',
					
					// Pk + length = 11, pk = 1, editable = 0
					'pk' 			=> 'integer', 
					'id' 			=> 'integer',
					'id' 			=> 'integer',
			),
		length: 			length of the field value [for int and varchar] (default: int=11, varchar=255)
		//subtype: 			[deprecated.] file, fixedValues, URIname, fakebool, fileMetaData, image, video, color, email, password, file, html, 
		possibleValues: 	[deprecated. use values instead]list of the possible values
		values: 			list of the possible values
		default:			default value
		null:				is the column null
		pk: 				is primary (default = false) key
		fk: 				is foreign (default = false) key
		unique: 			is unique (default = false) TODO
		index: 				is an index (default = false) TODO
		required: 			is the field required (default = false). TODO: finished and functional?
		relResource: 		name of the related resource for relations types
		relField: 			name of the field used for the join
		relGetFields: 		fields to get
		relGetAs: 			name of the gotten fields
		list:               is column displayed in list view. (default = false) (0 = no, 1 = yes on desktop, 2 = yes on tablet, 3 = yes on mobile)
		required:           is the data required. (default = false)
		editable:           is the data editable in the admin. (default = true)
		computed:           [deprecated] for data that should be generated by a computer process (ex: insertion date, random key, ...). (default = false)
		computedValue:      [deprecated]
		eval:               [deprecated] apply the specified eval command, replacing ---self--- by the field value. ex: 'eval' => 'strtolower(trim(---self---))'),
        modifiers:          [deprecated] apply the specified eval command, replacing ---self--- by the field value. ex: 'eval' => 'strtolower(trim(---self---))'),
		displayedValue:
		forceUpload:
		storeOn: 	 		amazon_S3, amazon_EC2, (default = 'ftp')
		acl: 	 			S3_ACL_PRIVATE, S3_ACL_PUBLIC, S3_ACL_OPEN, S3_ACL_AUTH_READ. default = S3_ACL_PRIVATE
		useField:  
		comment: 			short summary of what the data represents, for admin display only. (- 60 chars).
		displayName:  
		destRoot: 			never should be stored in db.
		exposed: 			(default = true)
		placeholder: 		TODO
		pattern:			TODO
		step: 				TODO
		min: 				TODO
		max: 				TODO
		listTruncate: 		In admin, in list view, will the displayed value truncated (default) or not
		pivotResource: 		name of the resource used as the pivot. default = {current column}_{relResource}. (ie: groups)
		pivotLeftField:		name of the 1st column used in the pivot relation. default = singular(current resource})_id. (ie: user_id)
		pivotRightField:	name of the 2nd column used in the pivot relation.default = singular(current resource})_id. (ie: group_id)
		modifidiers: 		TODO strtolower, strtoupper, ucfirst, capitalize, regex_replace,
		html: 				Allow text columns to contains html. htmlentities() is applied on the output  (default = false)
	_resources
        _aliases
        $item$
        	name
    		type
    			* recognized (native, relational, custom, filter)
    		singular
    			* default = singularized() applied (try using resource name termination). recognized terminations: uses => us, ses => ss, hes => h, ies => y, oes => o, ves => f, a => um, s => [empty],
    		plural <==== TODO
    			* default = resource name
        	db <======= TODO
    		table
    			* default = resource name
        	alias
            displayName
    		defaultNameField <=== TODO: rename into descField?
            searchable
            exposed
            crudability (CRUD)
	_groups
	_resource (ref to $this->_resource[$this->_resourceName])
	_resourceName (ref to $this->resource['name'])
		* TODO: default to null????????
	_resourceSingular (ref to $this->resource['singular'])
	request
        url
        params
        isAjax
    		* default to null
        parts
		knownExtensions
			* values: 'html','xhtml','json','jsonp','xml','plist','yaml','csv','qr','plistxml','yamltxt','jsontxt','jsonreport'
        outputFormat
            * default to html
        knownMimes
            * values
            	'text/html' 				=> 'html',
            	'application/xhtml+xml' 	=> 'xhtml',
            	'application/json' 			=> 'json',
            	'text/json' 				=> 'json',
            	'application/json-p' 		=> 'jsonp',
            	//'application/json' 			=> 'jsonp',
            	//'application/javascript' 	=> 'jsonp',
            	'text/xml' 					=> 'xml', 
            	'application/xml' 			=> 'xml',
            	'application/plist+xml' 	=> 'plist',
            	'text/yaml' 				=> 'yaml',
            	'text/csv' 					=> 'csv',
            	// TODO: RSS
            	// TODO: ATOM
            	// TODO: RDF
            	// TODO: ZIP
        )
        resource
        breadcrumbs
        controller
            name
            rawname
            method
            params
        redirect()
        getParam()
    	platform
			name
				* values: 'Windows','Mac OS','linux','freebsd','iPhone','iPod','iPad','Android','BlackBerry','Bada','AdobeAIR','tabbee','mobile','j2me','unknownPlatform'
			version
		browser
			name
			alias
			version
				full
				major
				minor
				build
				revision
			versionFull
			engine
				* values: ('trident', 'webkit', 'presto', 'gecko', 'mango', 'unknownBrowser')
			identifier
			displayName
    	env???
		options???? TODO: move/merge with params?
			viewType
			offset
			limit
			sortBy
			orderBy
			by
			value
			values
			operation
			debug
			confirm
			errors
			successes
			warnings
			notifications
        _magic (only available in templates and only if the ouput is HTML or XHTML)
            name
            classes
            css
            js
            cacheId
	events
	notifications
		success
		errors
		warnings
		infos
	success (alias to $this->notifications->success)
    warnings (alias to $this->notifications->success)
	errors (alias to $this->notifications->warnings)
    infos (alias to $this->notifications->infos)
	data
		_current
			resource
			menu
			url
			urlParams
			offset
			limit
			sortBy
			orderBy
		search	
	model
	view
		headers????
		layout
		template
		css
            * boolean
            * or string (csv css group names)
            * or array of css group names
            * (group names can be just a css file or existing group names in config/*/css.php)
            * (a group name or a css file can be prefixed with -- to be removed from the final loaded css list)
            * => will be transformed into an array of css file(s)
		js
            * boolean
            * or string (csv js group names)
            * or array of js group names
            * (group names can be just a js file or existing group names in config/*/css.php)
            * (a group name or a js file can be prefixed with -- to be removed from the final loaded js list)
            * => will be transformed into an array of js file(s)
		name
		title
		meta
		description
		keywords
        cache
        cacheId
        htmlAttributes              // string of attributes to insert in the <html tag>. Ex 'data-appVersion="1.5.2"'
        robotsArchivable            // boolean [default use _APP_META_ROBOTS_ARCHIVABLE]
        robotsIndexable             // boolean [default use _APP_META_ROBOTS_INDEXABLE]
        robotsImagesIndexable       // boolean [default use _APP_META_ROBOTS_IMAGES_INDEXABLE]
        googleTranslatable          // boolean [default use _APP_META_GOOGLE_TRANSLATABLE]
        refresh                     // int (seconds) after which the page should refresh (reload). [default = null]
        iosWebappCapable            // boolean [default use _APP_IOS_WEBAPP_CAPABLE]
        iosIniScale                 // float (min 0, max 10) [default = _APP_IOS_INISCALE]
        allowPrerendering           // boolean [default use _APP_ALLOW_PAGE_PRERENDERING]
        minifyCSS                   // boolean [check for ?minify=css or ?minify=all or default use _MINIFY_CSS]
        minifyJS                    // boolean [check for ?minify=js or ?minify=all or default use _MINIFY_JS]
        minifyHTML                  // boolean [check for ?minify=html or ?minify=all or default use _MINIFY_HTML]
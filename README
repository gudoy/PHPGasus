WHAT IS PHPGasus
PHPGasus is another PHP Framework which aims to allow quick and smart web developements being the more easy to learn & use than possible. 
It's based on well known principles

PRINCIPLES
- REST 
- ROA
- Model Driven Development
- DRY
- KISS
- MVC
- Conventions over configuration
- less is more (“Perfection is achieved, not when there is nothing left to add, but when there is nothing left to remove.” (Antoine de Saint-Exupéry))
- the content is the interface

INSPIRATION
- RESTful web services: http://www.amazon.fr/Restful-Web-Services-Leonard-Richardson/dp/0596529260/ref=sr_1_1?ie=UTF8&qid=1311161813&sr=8-1
- Apple iOS
- John Maeda
- http://design.activeside.net/design-chaos-et-complexite


REQUIREMENTS
- PHP 5 (best 5.3, or recommanded >5.2.6)
- Apache 2 (with mod_rewrite)


TOP FEATURES
- EASY SETUP (just upload files and launch setup page)
- AUTOMATIC DATABASE SCHEMA retrieval
- ORM via admin interface (or by smart & simple php files for code purists)
- DBAL with support for mysql, postgresql, sqlite & mongoDB
- ADMIN generator (scaffholding)
- API generator (scaffholding)
- PERFs optimized (includes preconfigured vhost and/or .htaccess)
- EASY to learn (no 500 pages book or 200 pages website documentation)
- HTML5 based
- OS/DEVICE & Browser sniffing 
- CSS/JS minification
- TEMPLATES engines included (smarty 3, Twig & Haaga)
- ACL module included (users-groups-permissions)
- PRECONFIGURED ENVIRONMENTS (local,dev,preprod,prod)
- DEFAULT OUTPUT FORMATS included for all views/pages (html, xhtml, xml, json, jsonp, jsonreport, yaml, plist, csv, rss, atom, pdf)
- AUTO-UPDATES (to come)


WHY Use PHPGasus
- you love things like Ruby on Rails, Django, Python, jQuery,
- you can stand watching the code of Wordpress or Drupal for their uglyness
- you can stand watching the code of Symfony for it's verbosity
- you want to start coding immediately, code few, fast, clean & secure
- you love the tools that try to guess want you want and act consequently
- you love syntactic sugar
- you don't want to read a 500 pages book or ten 20 minutes videos to start doing great things
- you don't want to have to use a CLI (Command Line Interface) to create anything
- you love smart & ergonomic interfaces (with lots of magic applied)
- even if you are a code fanatic or interface hater, you can do it too (and their still some magic applied)
- you prefer doing $this->users->getOneBirthdateByEmail('foo@bar.com') than $this->db->query("SELECT birthdate FROM users AS u WHERE u.email = 'foo@bar.com' LIMIT 1")


Dispatcher
In PHPGasus, every URL (except for content in public folder) is redirected to the dispatcher : index.php at the root of your project.
This function tries to call the proper method of the proper controller with proper arguments.


/parent/child/grandchild => 
/Controller/{parent}/{child}/{grandchild}/C{Grandchild}.class.php::index() 
|| /Controller/{parent}/{child}/C{Grandchild}.class.php::index() 
|| /Controller/{parent}/{child}/C{Child}.class.php::grandchild() 
|| /Controller/{parent}/V{Child}.class.php::grandchild() 
|| /Controller/{parent}/V{Parent}.class.php::child(array({grandchild})) 
|| /Controller/C{Parent}.class.php::child(array({grandchild})) 
|| /Controller/{parent}/V{Parent}.class.php::index(array({child}, {grandchild})) 
|| /Controller/C{Parent}.class.php::index(array({child}, {grandchild}))
|| /Controller/C{Home}.class.php::parent(array({child}, {grandchild})) 
|| /Controller/V{Home}.class.php::index(array({parent}, {child}, {grandchild}))
<==== TODO: try to detech mispelling of existing resources and/or methods ==> then display "Did you mean" page with link to proper page

Samples:
condider the following arborescence for controllers folder: [TODO: replace this by an image of the arbo]
/Controllers/CHome.class.php (with index() and hello() methods)
/Controllers/products/CProducs.class.php (with index() and retrieve() methods)
/Controllers/users/CUsers.class.php (with index() and me() methods)

VERB PATH         						  CONTROLLER CALLED 										  MODEL CALLED
GET /                                       => /CHome->index() 										 => no model call
GET /notAMethod                             => /CHome->error404('notAMethod') 						  => no model call
GET /hello/world                        	=> /CHome->hello('world') 								  => no model call
GET /hello/world/1                          => /CHome->hello('world','1')                               => no model call
GET /hello/world/1/2                        => /CHome->hello('world','1','2')                           => no model call
GET /hello/world/1/2/and/goes/on            => /CHome->hello('world','1','2,'and','goes','on')          => no model call
GET /products/                              => /CProducts->index()                                      => Products->getAll()
GET /products/1                             => /CProducts->retrieve('1')                                => Products->getOneByNameField(array('foo','bar'))
GET /products/myKillerProduct               => /CProducts->retrieve('myKillerProduct')                  => Products->getOneByNameField('myKillerProduct')
GET /products/myKillerProduct/blue          => /CProducts->retrieve('myKillerProduct','blue')           => Products->getOneByNameField('myKillerProduct') [blue isn't an existing column in users -> not used]
GET /users/                                 => /CUsers->index()                                         => Users->getAll() [limited to X items by defaut]
GET /users/me                               => /CUsers->me()                                            => Users->getById($loggedUsedId)
GET /users/me/42                            => /CUsers->me('42')                                        => Users->getById($loggedUsedId) [42 isn't an existing column in users -> not used]
GET /users/gudoy                            => /CUsers->retrieve('gudoy')                               => Users->getAllByNameField('gudoy')
GET /users/gudoy/42                         => /CUsers->retrieve('gudoy','42')                          => Users->getAllByNameField('gudoy') [42 isn't an existing column in users -> not used]
GET /users/gudoy/birthyear/1983             => /CUsers->retrieve('gudoy','birthyear','1983')            => Users->getAllByNameFieldWhereBirthyearIs1983('gudoy')
GET /users/42,43,44/                        => /CUsers->index('42,43,44')                               => Users->getAllById(array(42,43,44))
GET /users/42,43,44/email                   => /CUsers->index('42,43,44','email')                       => Users->getAllEmailById(array(42,43,44))
GET /users/42,43,44/email,birthday          => /CUsers->index('42,43,44','email,birthday')              => Users->getAllEmailAndBirthdayById(array(42,43,44))
GET /users/42,43,foo/email,birthday         => /CUsers->index('42,43,foo','email,birthday')             => Users->findAllEmailAndBirthdayById(array(42,43,'foo'))

/products => /products/products::index() || /products::index() || /home::users() || /home::index(array(products))
/products/foo => /products/foo/foo::users/products::index() || /products::index() || /home::products() || Home::index(array(products))


CONTROLLERS
- classname = 'C' + ucfirst(controllername)
- have to extends built in Controller
- require an 'index' method


JAVASCIPTS // TODO: choose pattern
GET     /                       => homeIndex                => home.init() && homeIndex.init()
GET     /about/                 => aboutIndex               => about.init() && aboutIndex.init()
GET     /about/credits          => aboutCreditsIndex        => about.init() && credits.init() && aboutCreditsIndex.init()
GET     /admin/                 => adminIndex               => admin.init() && adminIndex.init()
GET     /admin/user/42          => adminUsersRetrieve       => admin.init() && users.init() && adminUsers.init() && adminUsersRetrieve.init()
POST    /admin/user/42          => adminUsersUpdate         => admin.init() && users.init() && adminUsers.init() && adminUsersCreate.init()
PUT     /admin/user/42          => adminUsersUpdate         => admin.init() && users.init() && adminUsers.init() && adminUsersUpdate.init()
DELETE  /admin/user/42          => adminUsersDelete         => admin.init() && users.init() && adminUsers.init() && adminUsersDelete.init()
or 
GET     /                       => homeIndex                => home.init() && home.index()
GET     /about/                 => aboutIndex               => about.init() && about.index()
GET     /about/credits          => aboutCreditsIndex        => about.init() && credits.init() && aboutCreditsIndex.init()
GET     /admin/                 => adminIndex               => admin.init() && admin.index()
GET     /admin/users/42         => adminUsersRetrieve       => admin.init() && admin.users.init() && admin.users.retrieve()
POST    /admin/users/42         => adminUsersUpdate         => admin.init() && admin.users.init() && admin.users.create()
PUT     /admin/users/42         => adminUsersUpdate         => admin.init() && admin.users.init() && admin.users.update()
DELETE  /admin/users/42         => adminUsersDelete         => admin.init() && admin.users.init() && admin.users.delete()
GET     /users/42/products/     => usersProductsRetrieve    => users.init() && products.init() && users.products.init()

// + specifics js: load files + $(document).ready()


CODING PRACTICES
#http://net.tutsplus.com/tutorials/php/30-php-best-practices-for-beginners/
- know types handling, transtyping/casting, comparisions
- WARNING with == and ==== comparisions
- preferer ternary operator for simple if/else testing ( condition ? "condition is true" : "condition is false" )
- avoid if/for/foreach/... nesting (more than 2 levels is BAD, more than 3 levels is REALLY BAD
- use dynamic arguments (using $args = func_get_args()) or a $params as last param of your functions


Magic request params
{url}.html 					<== display the html reprensatation of the page data [default]
{url}.xhtml 				<== display the html reprensatation of the page data
{url}.qr 					<== display the qr code containing the url of the page data
{url}.json 					<== return the json representation of the page data
{url}.jsonp 				<== return the json representation of the page data
{url}.jsontxt 				<== return the json representation of the page data, served as plain text
{url}.jsonreport 			<== return the jsonreport (http://ajaxstack.com/jsonreport/) of the page data
{url}.xml                	<== return the xml representation of the page data
{url}.plist              	<== return the plist representation of the page data
{url}.plistxml           	<== return the plist representation of the page data, served as plain text
{url}.yaml               	<== return the yaml representation of the page data
?css=no                     <== disable css
?js=no                      <== disable js
?minify=all                 <== force minification of js & css (override conf directives)
?minify=css                 <== force minification of css
?minify=js                  <== force minification of js
?minify=html                <== force minification of html
?tplSelf=1                  <== only return main template content (not the layout) [by default for ajax requests]
?limit=100                  <== never return more than 100 items for a resource (unless you explicitely asked for more using 'limit' => -1 params in your code 
 

REFERENCE
soon...